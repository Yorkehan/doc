(window.webpackJsonp=window.webpackJsonp||[]).push([[84],{196:function(t,s,n){"use strict";n.r(s);var a=n(0),e=Object(a.a)({},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("div",{staticClass:"content"},[t._m(0),t._v(" "),t._m(1),t._v(" "),t._m(2),t._v(" "),t._m(3),t._v(" "),t._m(4),t._v(" "),n("blockquote",[n("p",[n("strong",[t._v("ЗАМЕЧАНИЕ:")]),t._v(" В примерах кода документации используется синтаксис ES2015. Если вы с ним ещё не знакомы, "),n("a",{attrs:{href:"https://babeljs.io/docs/learn-es2015/",target:"_blank",rel:"noopener noreferrer"}},[t._v("сейчас самое время изучить"),n("OutboundLink")],1),t._v("!")])]),t._v(" "),n("p",[t._v("После "),n("router-link",{attrs:{to:"./../installation.html"}},[t._v("установки")]),t._v(" Vuex, давайте создадим хранилище. Это довольно просто — необходимо указать начальный объект состояния и некоторые мутации:")],1),t._v(" "),t._m(5),t._m(6),t._v(" "),t._m(7),t._m(8),t._v(" "),n("p",[t._v("Использование состояние хранилища в компоненте предполагает просто возврат необходимой части состояния в вычисляемом свойстве, поскольку состояние хранилища реактивно. Инициирование изменений — это просто запуск мутаций в методах компонентов.")]),t._v(" "),n("p",[t._v("Вот пример "),n("a",{attrs:{href:"https://jsfiddle.net/n9jmu5v7/1269/",target:"_blank",rel:"noopener noreferrer"}},[t._v("простейшего приложения Vuex, реализующего счётчик"),n("OutboundLink")],1),t._v(".")]),t._v(" "),n("p",[t._v("Далее мы разберём все основные понятия детальнее и начнём с состояния.")])])},[function(){var t=this.$createElement,s=this._self._c||t;return s("h1",{attrs:{id:"введение"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#введение","aria-hidden":"true"}},[this._v("#")]),this._v(" Введение")])},function(){var t=this.$createElement,s=this._self._c||t;return s("div",{staticClass:"scrimba"},[s("a",{attrs:{href:"https://scrimba.com/p/pnyzgAP/cMPa2Uk",target:"_blank",rel:"noopener noreferrer"}},[this._v("Пройдите этот урок на Scrimba")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("В центре любого Vuex-приложения находится "),s("strong",[this._v("хранилище")]),this._v(". «Хранилище» — это контейнер, в котором хранится "),s("strong",[this._v("состояние")]),this._v(" вашего приложения. Два момента отличают хранилище Vuex от простого глобального объекта:")])},function(){var t=this.$createElement,s=this._self._c||t;return s("ol",[s("li",[s("p",[this._v("Хранилище Vuex реактивно. Когда компоненты Vue полагаются на его состояние, то они будут реактивно и эффективно обновляться, если состояние хранилища изменяется.")])]),this._v(" "),s("li",[s("p",[this._v("Нельзя напрямую изменять состояние хранилища. Единственный способ внести изменения — явно "),s("strong",[this._v("вызвать мутацию")]),this._v(". Это гарантирует, что любое изменение состояния оставляет след и позволяет использовать инструментарий, чтобы лучше понимать ход работы приложения.")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"простейшее-храниnище"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#простейшее-храниnище","aria-hidden":"true"}},[this._v("#")]),this._v(" Простейшее хранилище")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Убедитесь, что вызвали Vue.use(Vuex) сначала, если используете систему сборки")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" store "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Vuex"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Store")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  state"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    count"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  mutations"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("increment")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("state"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      state"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("count"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("Теперь можно получить доступ к объекту состояния через "),s("code",[this._v("store.state")]),this._v(" и вызвать изменение состояния с помощью метода "),s("code",[this._v("store.commit")]),this._v(":")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[t._v("store"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("commit")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'increment'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\nconsole"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("store"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("state"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("count"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// -> 1")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("Запомните, причина, по которой мы вызываем мутацию, вместо изменения "),s("code",[this._v("store.state.count")]),this._v(" напрямую, в том, что мы хотим явным образом отслеживать её. Это простое соглашение делает наше намерение более явным, что упрощает понимание происходящих изменений состояния приложения при чтении кода. Кроме того, это позволяет использовать инструменты для отслеживания каждой мутации, создания снимков состояния или даже использования «машины времени» для отладки.")])}],!1,null,null,null);e.options.__file="README.md";s.default=e.exports}}]);